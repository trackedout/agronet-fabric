plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
    id "org.jetbrains.kotlin.jvm" version "1.9.21"
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.20'
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.2.19"
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.

    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }

}

loom {
    splitEnvironmentSourceSets()

    mods {
        "agronet" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.1'

    // https://square.github.io/okhttp/#releases
    include modImplementation(platform("com.squareup.okhttp3:okhttp-bom:4.11.0"))
    include modImplementation("com.squareup.okhttp3:okhttp:4.11.0")
    include modImplementation("com.squareup.okhttp3:logging-interceptor:4.11.0")
    include modImplementation("com.squareup.moshi:moshi:1.14.0")
    include modImplementation("com.squareup.moshi:moshi-kotlin:1.14.0")

    include modImplementation("com.squareup.okio:okio-jvm:3.0.0")

    // Redis database connection
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
    include modImplementation("redis.clients:jedis:5.1.0")

    // Fabric permissions
    include(modImplementation('me.lucko:fabric-permissions-api:0.2-SNAPSHOT'))

    // Add JUnit dependencies for testing
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.10.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.10.0")

    testImplementation 'com.google.guava:guava:32.1.2-jre'
}

def brillianceDataDir = "data/brilliance-data"
def scoreboardsJsonPath = property('scoreboards_json')
def cardsJsonPath = property('cards_json')
def artifactsJsonPath = property('artifacts_json')

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }

    // Place json files in resources/brilliance-data/
    from(scoreboardsJsonPath) {
        into(brillianceDataDir)
    }
    from(cardsJsonPath) {
        rename { "cards.json" }
        into(brillianceDataDir)
    }
    from(artifactsJsonPath) {
        rename { "artifacts.json" }
        into(brillianceDataDir)
    }
}

processTestResources {
    from(scoreboardsJsonPath) {
        into(brillianceDataDir)
    }
    from(cardsJsonPath) {
        rename { "cards.json" }
        into(brillianceDataDir)
    }
    from(artifactsJsonPath) {
        rename { "artifacts.json" }
        into(brillianceDataDir)
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = 17
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

test {
    useJUnitPlatform()
}
