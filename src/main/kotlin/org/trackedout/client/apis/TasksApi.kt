/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.trackedout.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.trackedout.client.models.Error
import org.trackedout.client.models.Task
import org.trackedout.client.models.TasksGet200Response
import org.trackedout.client.models.TasksIdPatchRequest

import com.squareup.moshi.Json

import org.trackedout.client.infrastructure.ApiClient
import org.trackedout.client.infrastructure.ApiResponse
import org.trackedout.client.infrastructure.ClientException
import org.trackedout.client.infrastructure.ClientError
import org.trackedout.client.infrastructure.ServerException
import org.trackedout.client.infrastructure.ServerError
import org.trackedout.client.infrastructure.MultiValueMap
import org.trackedout.client.infrastructure.PartConfig
import org.trackedout.client.infrastructure.RequestConfig
import org.trackedout.client.infrastructure.RequestMethod
import org.trackedout.client.infrastructure.ResponseType
import org.trackedout.client.infrastructure.Success
import org.trackedout.client.infrastructure.toMultiValue

class TasksApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:3000/v1")
        }
    }

    /**
     * Get all tasks
     * Retrieve tasks, typically filtered for a specific server for it to action.
     * @param server Server name (optional)
     * @param type Task type (optional)
     * @param state Task state (optional)
     * @param sortBy sort by query in the form of field:desc/asc (ex. name:asc) (optional)
     * @param projectBy project by query in the form of field:hide/include (ex. name:hide) (optional)
     * @param limit Maximum number of tasks (optional)
     * @param page Page number (optional, default to 1)
     * @return TasksGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tasksGet(server: kotlin.String? = null, type: kotlin.String? = null, state: kotlin.String? = null, sortBy: kotlin.String? = null, projectBy: kotlin.String? = null, limit: kotlin.Int? = null, page: kotlin.Int? = 1) : TasksGet200Response {
        val localVarResponse = tasksGetWithHttpInfo(server = server, type = type, state = state, sortBy = sortBy, projectBy = projectBy, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TasksGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all tasks
     * Retrieve tasks, typically filtered for a specific server for it to action.
     * @param server Server name (optional)
     * @param type Task type (optional)
     * @param state Task state (optional)
     * @param sortBy sort by query in the form of field:desc/asc (ex. name:asc) (optional)
     * @param projectBy project by query in the form of field:hide/include (ex. name:hide) (optional)
     * @param limit Maximum number of tasks (optional)
     * @param page Page number (optional, default to 1)
     * @return ApiResponse<TasksGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tasksGetWithHttpInfo(server: kotlin.String?, type: kotlin.String?, state: kotlin.String?, sortBy: kotlin.String?, projectBy: kotlin.String?, limit: kotlin.Int?, page: kotlin.Int?) : ApiResponse<TasksGet200Response?> {
        val localVariableConfig = tasksGetRequestConfig(server = server, type = type, state = state, sortBy = sortBy, projectBy = projectBy, limit = limit, page = page)

        return request<Unit, TasksGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tasksGet
     *
     * @param server Server name (optional)
     * @param type Task type (optional)
     * @param state Task state (optional)
     * @param sortBy sort by query in the form of field:desc/asc (ex. name:asc) (optional)
     * @param projectBy project by query in the form of field:hide/include (ex. name:hide) (optional)
     * @param limit Maximum number of tasks (optional)
     * @param page Page number (optional, default to 1)
     * @return RequestConfig
     */
    fun tasksGetRequestConfig(server: kotlin.String?, type: kotlin.String?, state: kotlin.String?, sortBy: kotlin.String?, projectBy: kotlin.String?, limit: kotlin.Int?, page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (server != null) {
                    put("server", listOf(server.toString()))
                }
                if (type != null) {
                    put("type", listOf(type.toString()))
                }
                if (state != null) {
                    put("state", listOf(state.toString()))
                }
                if (sortBy != null) {
                    put("sortBy", listOf(sortBy.toString()))
                }
                if (projectBy != null) {
                    put("projectBy", listOf(projectBy.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tasks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get a task
     * Get a task by ID
     * @param id Task ID
     * @return Task
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tasksIdGet(id: kotlin.String) : Task {
        val localVarResponse = tasksIdGetWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Task
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get a task
     * Get a task by ID
     * @param id Task ID
     * @return ApiResponse<Task?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tasksIdGetWithHttpInfo(id: kotlin.String) : ApiResponse<Task?> {
        val localVariableConfig = tasksIdGetRequestConfig(id = id)

        return request<Unit, Task>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tasksIdGet
     *
     * @param id Task ID
     * @return RequestConfig
     */
    fun tasksIdGetRequestConfig(id: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/tasks/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Update a task
     * Update a task&#39;s state to  one of [ \&quot;SCHEDULED\&quot;, \&quot;IN_PROGRESS\&quot;, \&quot;SUCCEEDED\&quot;, \&quot;FAILED\&quot; ]
     * @param id Task id
     * @param tasksIdPatchRequest 
     * @return Task
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tasksIdPatch(id: kotlin.String, tasksIdPatchRequest: TasksIdPatchRequest) : Task {
        val localVarResponse = tasksIdPatchWithHttpInfo(id = id, tasksIdPatchRequest = tasksIdPatchRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Task
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Update a task
     * Update a task&#39;s state to  one of [ \&quot;SCHEDULED\&quot;, \&quot;IN_PROGRESS\&quot;, \&quot;SUCCEEDED\&quot;, \&quot;FAILED\&quot; ]
     * @param id Task id
     * @param tasksIdPatchRequest 
     * @return ApiResponse<Task?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tasksIdPatchWithHttpInfo(id: kotlin.String, tasksIdPatchRequest: TasksIdPatchRequest) : ApiResponse<Task?> {
        val localVariableConfig = tasksIdPatchRequestConfig(id = id, tasksIdPatchRequest = tasksIdPatchRequest)

        return request<TasksIdPatchRequest, Task>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tasksIdPatch
     *
     * @param id Task id
     * @param tasksIdPatchRequest 
     * @return RequestConfig
     */
    fun tasksIdPatchRequestConfig(id: kotlin.String, tasksIdPatchRequest: TasksIdPatchRequest) : RequestConfig<TasksIdPatchRequest> {
        val localVariableBody = tasksIdPatchRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.PATCH,
            path = "/tasks/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Create a task
     * Schedule a remote task for one of the Decked Out 2 instances.
     * @param task 
     * @return Task
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun tasksPost(task: Task) : Task {
        val localVarResponse = tasksPostWithHttpInfo(task = task)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Task
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create a task
     * Schedule a remote task for one of the Decked Out 2 instances.
     * @param task 
     * @return ApiResponse<Task?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun tasksPostWithHttpInfo(task: Task) : ApiResponse<Task?> {
        val localVariableConfig = tasksPostRequestConfig(task = task)

        return request<Task, Task>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation tasksPost
     *
     * @param task 
     * @return RequestConfig
     */
    fun tasksPostRequestConfig(task: Task) : RequestConfig<Task> {
        val localVariableBody = task
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/tasks",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
