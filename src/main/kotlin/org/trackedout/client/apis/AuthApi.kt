/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.trackedout.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.trackedout.client.models.AuthForgotPasswordPostRequest
import org.trackedout.client.models.AuthLoginPostRequest
import org.trackedout.client.models.AuthLogoutPostRequest
import org.trackedout.client.models.AuthRegisterPost201Response
import org.trackedout.client.models.AuthRegisterPostRequest
import org.trackedout.client.models.AuthResetPasswordPostRequest
import org.trackedout.client.models.Error
import org.trackedout.client.models.UserWithTokens

import com.squareup.moshi.Json

import org.trackedout.client.infrastructure.ApiClient
import org.trackedout.client.infrastructure.ApiResponse
import org.trackedout.client.infrastructure.ClientException
import org.trackedout.client.infrastructure.ClientError
import org.trackedout.client.infrastructure.ServerException
import org.trackedout.client.infrastructure.ServerError
import org.trackedout.client.infrastructure.MultiValueMap
import org.trackedout.client.infrastructure.PartConfig
import org.trackedout.client.infrastructure.RequestConfig
import org.trackedout.client.infrastructure.RequestMethod
import org.trackedout.client.infrastructure.ResponseType
import org.trackedout.client.infrastructure.Success
import org.trackedout.client.infrastructure.toMultiValue

class AuthApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:3000/v1")
        }
    }

    /**
     * Forgot password
     * An email will be sent to reset password.
     * @param authForgotPasswordPostRequest 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authForgotPasswordPost(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest) : Unit {
        val localVarResponse = authForgotPasswordPostWithHttpInfo(authForgotPasswordPostRequest = authForgotPasswordPostRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Forgot password
     * An email will be sent to reset password.
     * @param authForgotPasswordPostRequest 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun authForgotPasswordPostWithHttpInfo(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest) : ApiResponse<Unit?> {
        val localVariableConfig = authForgotPasswordPostRequestConfig(authForgotPasswordPostRequest = authForgotPasswordPostRequest)

        return request<AuthForgotPasswordPostRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authForgotPasswordPost
     *
     * @param authForgotPasswordPostRequest 
     * @return RequestConfig
     */
    fun authForgotPasswordPostRequestConfig(authForgotPasswordPostRequest: AuthForgotPasswordPostRequest) : RequestConfig<AuthForgotPasswordPostRequest> {
        val localVariableBody = authForgotPasswordPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/forgot-password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Login
     * 
     * @param authLoginPostRequest 
     * @return AuthRegisterPost201Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authLoginPost(authLoginPostRequest: AuthLoginPostRequest) : AuthRegisterPost201Response {
        val localVarResponse = authLoginPostWithHttpInfo(authLoginPostRequest = authLoginPostRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthRegisterPost201Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Login
     * 
     * @param authLoginPostRequest 
     * @return ApiResponse<AuthRegisterPost201Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authLoginPostWithHttpInfo(authLoginPostRequest: AuthLoginPostRequest) : ApiResponse<AuthRegisterPost201Response?> {
        val localVariableConfig = authLoginPostRequestConfig(authLoginPostRequest = authLoginPostRequest)

        return request<AuthLoginPostRequest, AuthRegisterPost201Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authLoginPost
     *
     * @param authLoginPostRequest 
     * @return RequestConfig
     */
    fun authLoginPostRequestConfig(authLoginPostRequest: AuthLoginPostRequest) : RequestConfig<AuthLoginPostRequest> {
        val localVariableBody = authLoginPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/login",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Logout
     * 
     * @param authLogoutPostRequest 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authLogoutPost(authLogoutPostRequest: AuthLogoutPostRequest) : Unit {
        val localVarResponse = authLogoutPostWithHttpInfo(authLogoutPostRequest = authLogoutPostRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Logout
     * 
     * @param authLogoutPostRequest 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun authLogoutPostWithHttpInfo(authLogoutPostRequest: AuthLogoutPostRequest) : ApiResponse<Unit?> {
        val localVariableConfig = authLogoutPostRequestConfig(authLogoutPostRequest = authLogoutPostRequest)

        return request<AuthLogoutPostRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authLogoutPost
     *
     * @param authLogoutPostRequest 
     * @return RequestConfig
     */
    fun authLogoutPostRequestConfig(authLogoutPostRequest: AuthLogoutPostRequest) : RequestConfig<AuthLogoutPostRequest> {
        val localVariableBody = authLogoutPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/logout",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Refresh auth tokens
     * 
     * @param authLogoutPostRequest 
     * @return UserWithTokens
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authRefreshTokensPost(authLogoutPostRequest: AuthLogoutPostRequest) : UserWithTokens {
        val localVarResponse = authRefreshTokensPostWithHttpInfo(authLogoutPostRequest = authLogoutPostRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UserWithTokens
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Refresh auth tokens
     * 
     * @param authLogoutPostRequest 
     * @return ApiResponse<UserWithTokens?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authRefreshTokensPostWithHttpInfo(authLogoutPostRequest: AuthLogoutPostRequest) : ApiResponse<UserWithTokens?> {
        val localVariableConfig = authRefreshTokensPostRequestConfig(authLogoutPostRequest = authLogoutPostRequest)

        return request<AuthLogoutPostRequest, UserWithTokens>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authRefreshTokensPost
     *
     * @param authLogoutPostRequest 
     * @return RequestConfig
     */
    fun authRefreshTokensPostRequestConfig(authLogoutPostRequest: AuthLogoutPostRequest) : RequestConfig<AuthLogoutPostRequest> {
        val localVariableBody = authLogoutPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/refresh-tokens",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Register as user
     * 
     * @param authRegisterPostRequest 
     * @return AuthRegisterPost201Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authRegisterPost(authRegisterPostRequest: AuthRegisterPostRequest) : AuthRegisterPost201Response {
        val localVarResponse = authRegisterPostWithHttpInfo(authRegisterPostRequest = authRegisterPostRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AuthRegisterPost201Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Register as user
     * 
     * @param authRegisterPostRequest 
     * @return ApiResponse<AuthRegisterPost201Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun authRegisterPostWithHttpInfo(authRegisterPostRequest: AuthRegisterPostRequest) : ApiResponse<AuthRegisterPost201Response?> {
        val localVariableConfig = authRegisterPostRequestConfig(authRegisterPostRequest = authRegisterPostRequest)

        return request<AuthRegisterPostRequest, AuthRegisterPost201Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authRegisterPost
     *
     * @param authRegisterPostRequest 
     * @return RequestConfig
     */
    fun authRegisterPostRequestConfig(authRegisterPostRequest: AuthRegisterPostRequest) : RequestConfig<AuthRegisterPostRequest> {
        val localVariableBody = authRegisterPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/register",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Reset password
     * 
     * @param token The reset password token
     * @param authResetPasswordPostRequest 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authResetPasswordPost(token: kotlin.String, authResetPasswordPostRequest: AuthResetPasswordPostRequest) : Unit {
        val localVarResponse = authResetPasswordPostWithHttpInfo(token = token, authResetPasswordPostRequest = authResetPasswordPostRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Reset password
     * 
     * @param token The reset password token
     * @param authResetPasswordPostRequest 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun authResetPasswordPostWithHttpInfo(token: kotlin.String, authResetPasswordPostRequest: AuthResetPasswordPostRequest) : ApiResponse<Unit?> {
        val localVariableConfig = authResetPasswordPostRequestConfig(token = token, authResetPasswordPostRequest = authResetPasswordPostRequest)

        return request<AuthResetPasswordPostRequest, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authResetPasswordPost
     *
     * @param token The reset password token
     * @param authResetPasswordPostRequest 
     * @return RequestConfig
     */
    fun authResetPasswordPostRequestConfig(token: kotlin.String, authResetPasswordPostRequest: AuthResetPasswordPostRequest) : RequestConfig<AuthResetPasswordPostRequest> {
        val localVariableBody = authResetPasswordPostRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/reset-password",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Send verification email
     * An email will be sent to verify email.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authSendVerificationEmailPost() : Unit {
        val localVarResponse = authSendVerificationEmailPostWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Send verification email
     * An email will be sent to verify email.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun authSendVerificationEmailPostWithHttpInfo() : ApiResponse<Unit?> {
        val localVariableConfig = authSendVerificationEmailPostRequestConfig()

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authSendVerificationEmailPost
     *
     * @return RequestConfig
     */
    fun authSendVerificationEmailPostRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/send-verification-email",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * verify email
     * 
     * @param token The verify email token
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun authVerifyEmailPost(token: kotlin.String) : Unit {
        val localVarResponse = authVerifyEmailPostWithHttpInfo(token = token)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * verify email
     * 
     * @param token The verify email token
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun authVerifyEmailPostWithHttpInfo(token: kotlin.String) : ApiResponse<Unit?> {
        val localVariableConfig = authVerifyEmailPostRequestConfig(token = token)

        return request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation authVerifyEmailPost
     *
     * @param token The verify email token
     * @return RequestConfig
     */
    fun authVerifyEmailPostRequestConfig(token: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/auth/verify-email",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
