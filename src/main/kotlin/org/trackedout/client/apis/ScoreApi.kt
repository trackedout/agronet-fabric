/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.trackedout.client.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import org.trackedout.client.models.Error
import org.trackedout.client.models.Score
import org.trackedout.client.models.ScoresGet200Response

import com.squareup.moshi.Json

import org.trackedout.client.infrastructure.ApiClient
import org.trackedout.client.infrastructure.ApiResponse
import org.trackedout.client.infrastructure.ClientException
import org.trackedout.client.infrastructure.ClientError
import org.trackedout.client.infrastructure.ServerException
import org.trackedout.client.infrastructure.ServerError
import org.trackedout.client.infrastructure.MultiValueMap
import org.trackedout.client.infrastructure.PartConfig
import org.trackedout.client.infrastructure.RequestConfig
import org.trackedout.client.infrastructure.RequestMethod
import org.trackedout.client.infrastructure.ResponseType
import org.trackedout.client.infrastructure.Success
import org.trackedout.client.infrastructure.toMultiValue

class ScoreApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost:3000/v1")
        }
    }

    /**
     * Add a score
     * Add a score for a player
     * @param score 
     * @return Score
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scoresAddScorePost(score: Score) : Score {
        val localVarResponse = scoresAddScorePostWithHttpInfo(score = score)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Score
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Add a score
     * Add a score for a player
     * @param score 
     * @return ApiResponse<Score?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun scoresAddScorePostWithHttpInfo(score: Score) : ApiResponse<Score?> {
        val localVariableConfig = scoresAddScorePostRequestConfig(score = score)

        return request<Score, Score>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scoresAddScorePost
     *
     * @param score 
     * @return RequestConfig
     */
    fun scoresAddScorePostRequestConfig(score: Score) : RequestConfig<Score> {
        val localVariableBody = score
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/scores/add-score",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Delete a score
     * Remove a score from a player&#39;s deck. If multiple copies of this score exist, only one will be removed.
     * @param score 
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scoresDeleteScorePost(score: Score) : Unit {
        val localVarResponse = scoresDeleteScorePostWithHttpInfo(score = score)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a score
     * Remove a score from a player&#39;s deck. If multiple copies of this score exist, only one will be removed.
     * @param score 
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun scoresDeleteScorePostWithHttpInfo(score: Score) : ApiResponse<Unit?> {
        val localVariableConfig = scoresDeleteScorePostRequestConfig(score = score)

        return request<Score, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scoresDeleteScorePost
     *
     * @param score 
     * @return RequestConfig
     */
    fun scoresDeleteScorePostRequestConfig(score: Score) : RequestConfig<Score> {
        val localVariableBody = score
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/scores/delete-score",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Get all scores
     * Only admins can retrieve all scores.
     * @param player Player (optional)
     * @param sortBy sort by query in the form of field:desc/asc (ex. name:asc) (optional)
     * @param projectBy project by query in the form of field:hide/include (ex. name:hide) (optional)
     * @param limit Maximum number of scores (optional)
     * @param page Page number (optional, default to 1)
     * @return ScoresGet200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scoresGet(player: kotlin.String? = null, sortBy: kotlin.String? = null, projectBy: kotlin.String? = null, limit: kotlin.Int? = null, page: kotlin.Int? = 1) : ScoresGet200Response {
        val localVarResponse = scoresGetWithHttpInfo(player = player, sortBy = sortBy, projectBy = projectBy, limit = limit, page = page)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ScoresGet200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get all scores
     * Only admins can retrieve all scores.
     * @param player Player (optional)
     * @param sortBy sort by query in the form of field:desc/asc (ex. name:asc) (optional)
     * @param projectBy project by query in the form of field:hide/include (ex. name:hide) (optional)
     * @param limit Maximum number of scores (optional)
     * @param page Page number (optional, default to 1)
     * @return ApiResponse<ScoresGet200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun scoresGetWithHttpInfo(player: kotlin.String?, sortBy: kotlin.String?, projectBy: kotlin.String?, limit: kotlin.Int?, page: kotlin.Int?) : ApiResponse<ScoresGet200Response?> {
        val localVariableConfig = scoresGetRequestConfig(player = player, sortBy = sortBy, projectBy = projectBy, limit = limit, page = page)

        return request<Unit, ScoresGet200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scoresGet
     *
     * @param player Player (optional)
     * @param sortBy sort by query in the form of field:desc/asc (ex. name:asc) (optional)
     * @param projectBy project by query in the form of field:hide/include (ex. name:hide) (optional)
     * @param limit Maximum number of scores (optional)
     * @param page Page number (optional, default to 1)
     * @return RequestConfig
     */
    fun scoresGetRequestConfig(player: kotlin.String?, sortBy: kotlin.String?, projectBy: kotlin.String?, limit: kotlin.Int?, page: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (player != null) {
                    put("player", listOf(player.toString()))
                }
                if (sortBy != null) {
                    put("sortBy", listOf(sortBy.toString()))
                }
                if (projectBy != null) {
                    put("projectBy", listOf(projectBy.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/scores",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * Batch update or insert scores
     * Batch update or insert scores
     * @param score 
     * @return kotlin.collections.List<Score>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun scoresPost(score: kotlin.collections.List<Score>) : kotlin.collections.List<Score> {
        val localVarResponse = scoresPostWithHttpInfo(score = score)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Score>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Batch update or insert scores
     * Batch update or insert scores
     * @param score 
     * @return ApiResponse<kotlin.collections.List<Score>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun scoresPostWithHttpInfo(score: kotlin.collections.List<Score>) : ApiResponse<kotlin.collections.List<Score>?> {
        val localVariableConfig = scoresPostRequestConfig(score = score)

        return request<kotlin.collections.List<Score>, kotlin.collections.List<Score>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation scoresPost
     *
     * @param score 
     * @return RequestConfig
     */
    fun scoresPostRequestConfig(score: kotlin.collections.List<Score>) : RequestConfig<kotlin.collections.List<Score>> {
        val localVariableBody = score
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/scores",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
